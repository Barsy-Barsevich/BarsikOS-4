; Advanced Function Set 4


; Функция REG_BITSET - установка разряда
; Ввод: B (исходное число), A (номер разряда 2-1-0)
; Вывод: A (B с установленным разрядом)
; Используемые регистры: AF,BС,HL
; Используемая память: нет
; Длина: 20 байт
; Время выполнения: 59 тактов

BITSET:
        ANI         $07
        MOV         C,A
        MOV         A,B
        LXI         H,bitset_msk
        MVI         B,$00
        DAD         B
        ORA         M
        RET
bitset_msk:
        .DB         $01
        .DB         $02
        .DB         $04
        .DB         $08
        .DB         $10
        .DB         $20
        .DB         $40
        .DB         $80



; Функция BITCLR - очистка разряда
; Ввод: B (исходное число), A (номер разряда 2-1-0)
; Вывод: A (B с отчищенным разрядом)
; Используемые регистры: AF,BС,HL
; Используемая память: нет
; Длина: 20 байт
; Время выполнения: 59 тактов

BITCLR:
        ANI         $07
        MOV         C,A
        MOV         A,B
        LXI         H,bitclr_msk
        MVI         B,$00
        DAD         B
        ANA         M
        RET
bitclr_msk:
        .DB         $FE
        .DB         $FD
        .DB         $FB
        .DB         $F7
        .DB         $EF
        .DB         $DF
        .DB         $BF
        .DB         $7F



; Функция REG_BITTST - проверка разряда
; Ввод: B (исходное число), A (номер разряда 2-1-0)
; Вывод: Z=1 - разряд очищен
;        Z=0 - разряд установлен
; Используемые регистры: AF,BС,HL
; Используемая память: нет
; Длина: 20 байт
; Время выполнения: 59 тактов

BITTST:
        ANI         $07
        MOV         C,A
        MOV         A,B
        LXI         H,bitset_msk
        MVI         B,$00
        DAD         B
        ANA         M
        RET



; Функция MFILL - заполнение памяти
; Ввод:  Адрес начала - HL
;        Размер области - DE
;        Значение, помещаемое в память - A
; Вывод: нет
; Используемые регистры: AF,С,DE,HL
; Используемая память: нет
; Длина: 10 байт
; Время выполнения: DE*37+11

MFILL:
        mov         c,a
mfill-loop:
        mov         m,c
        inx         h
        dcx         d
        mov         a,e
        ora         d
        jnz         mfill-loop
        ret

;
; Функция COPCOUNT - копирование массивов памяти
; Ввод: HL - адрес "куда копируем"
;       DE - адрес "откуда копируем"
;       BC - количество копируемых ячеек памяти
; Вывод: нет
; Используемые регистры: все
; Длина: 15 байт
; Время выполнения: -
COPCOUNT:
    inr     b
    inr     c
str_copcount_1:
    dcr     c
    jnz     str_copcount_2
    dcr     b
    rz
str_copcount_2:
    ldax    d
    mov     m,a
    inx     h
    inx     d
    jmp     str_copcount_1



; Функция SYM_IS_DEC - проверка значения ASCII, является ли десятичной цифрой
; Ввод: A
; Вывод: (CY=0) - не является цифрой, (CY=1) - является десятичной цифрой
; Используемые регистры: F
; Оценка: длина - 7 байт, время - 

SYM_IS_DEC:
;Если больше 39H, return (CY=0)
        cpi         $3A
        rnc
;Если меньше 30H, return (CY=0). Иначе return (CY=1)
        cpi         $30
        cmc
        ret


; Функция SYM_IS_HEX - проверка значения ASCII, является ли шестнадцатиричной цифрой
; Ввод: A
; Вывод: (CY=0) - не является цифрой, (CY=1) - является шестнадцатиричной цифрой
; Используемые регистры: F
; Используемые функции:
;   - SYM_IS_DEC
; Оценка: длина - 11 байт, время - 
SYM_IS_HEX:
        call        SYM_IS_DEC
        rc
;Если больше 46H, return (CY=0)
        cpi         $47
        rnc
;Если меньше 41H, return (CY=0). Иначе return (CY=1)
        cpi         $41
        cmc
        ret


; Функция ASCBCD - преобразование кода ASCII в BCD
; Ввод: A (код ASCII)
; Вывод: (CY=1) - успешно, A (данные BCD)
;        (CY=0) - неудачно, A (исходные данные)
; Используемые регистры: AF
; Оценка: длина - 13 байт, время - 
ASCBCD:
        call        SYM_IS_HEX
        rnc
        sui         30H
        cpi         0AH
        rc
        sui         07H
        stc
        ret

; Функция BCDASC - преобразование кода BCD в ASCII
; Ввод: A
; Вывод: A
; Используемые регистры:
; Оценка: длина - 10 байт, время - 
BCDASC:
        ani         $0F  ;защита от дурака
        adi         $30
        cpi         $3A
        rm
        adi         $07
        ret


; Функция ASCSEG7 - преобразование шестнадцатиричной цифры в коде ASCII в
; семисегментный код
; Функция BCDSEG7 - преобразование шестнадцатиричной цифры в BCD-коде в 
; семисегментный код
; Ввод: A
; Вывод: A (функция ASCSEG7, если введенное значение не шестнадцатиричная
; цифра, возвращает '-')
; Формат выходных данных:
; | 7|6|5|4|3|2|1|0|
; |DP|G|F|E|D|C|B|A|
; Используемые регистры: AF,BC
; Оценка: длина - 31 байт
ASCSEG7:
        call    ASCBCD
        jc      bcdseg7_1
        mvi     a,$40   ;'-'
        ret
BCDSEG7:
        ani     $0F
bcdseg7_1:
        lxi     b,STR_7seg
        add     c
        mov     c,a
        mvi     a,$00
        adc     b
        mov     b,a
        ldax    b
        ret
STR_7seg:
        .db     $3F     ;'0'
        .db     $06     ;'1'
        .db     $5B     ;'2'
        .db     $4F     ;'3'
        .db     $66     ;'4'
        .db     $6D     ;'5'
        .db     $7D     ;'6'
        .db     $07     ;'7'
        .db     $7F     ;'8'
        .db     $6F     ;'9'
        .db     $77     ;'A'
        .db     $7C     ;'B'
        .db     $58     ;'C'
        .db     $5E     ;'D'
        .db     $79     ;'E'
        .db     $71     ;'F'
        .DB     $     ;'G'
        .DB     $     ;'H'
        .DB     $     ;'I'
        .DB     $     ;'J'
        .DB     $     ;'K'
        .DB     $     ;'L'
        .DB     $     ;'M'
        .DB     $     ;'N'
        .DB     $     ;'O'
        .DB     $     ;'P'
        .DB     $     ;'Q'
        .DB     $     ;'R'
        .DB     $     ;'S'
        .DB     $     ;'T'
        .DB     $     ;'U'
        .DB     $     ;'V'
        .DB     $     ;'W'
        .DB     $     ;'X'
        .DB     $     ;'Y'
        .DB     $     ;'Z'
        
