
; FADD3- сложение 2 3-байтных двоичных чисел с плавающей запятой в
; дополнительном коде формата (8,16)=(ПОР,МАН), где байт порядка содержит
; бит знака мантиссы и целочисленный порядок со смещением +40H, а 2 байта
; мантиссы - СТБ и МЛБ - двоичное дробное нормализованное число в допкоде.
; FADD3:
; Ввод:  (stack+4) - адрес слагаемого 1
;        (stack+2) - адрес слагаемого 2
; Вывод: (BC) - адрес суммы (сумма на месте слагаемого 1), CY=1 - признак
; переполнения или антипереполнения порядка

; FSUB3- вычитание 2 3-байтных двоичных чисел с плавающей запятой в
; дополнительном коде формата (8,16)=(ПОР,МАН), где байт порядка содержит
; бит знака мантиссы и целочисленный порядок со смещением +40H, а 2 байта
; мантиссы - СТБ и МЛБ - двоичное дробное нормализованное число в допкоде.
; FSUB3:
; Ввод:  (stack+4) - адрес числа
;        (stack+2) - адрес вычитаемого
; Вывод: (BC) - адрес разности (разность на месте числа), CY=1 - признак
; переполнения или антипереполнения порядка

; FMUL3 - умножение 2 3-байтных двоичных чисел с плавающей запятой в
; дополнительном коде формата (8,16)=(ПОР,МАН), где байт порядка содержит
; бит знака мантиссы и целочисленный порядок со смещением +40H, а 2 байта
; мантиссы - СТБ и МЛБ - двоичное дробное нормализованное число в допкоде.
; FMUL3:
; Ввод:  (stack+4) - адрес множимого
;        (stack+2) - адрес множителя
; Вывод: (BC) - адрес произведения (произведение на месте множимого),
; CY=1 - признак переполнения или антипереполнения порядка

; FDIV3 - деление 2 3-байтных двоичных чисел с плавающей запятой в
; дополнительном коде формата (8,16)=(ПОР,МАН), где байт порядка содержит
; бит знака мантиссы и целочисленный порядок со смещением +40H, а 2 байта
; мантиссы - СТБ и МЛБ - двоичное дробное нормализованное число в допкоде.
; FDIV3:
; Ввод:  (stack+4) - адрес делимого
;        (stack+2) - адрес делителя
; Вывод: (BC) - адрес частного (частное на месте делимого), CY=1 - признак
; переполнения или антипереполнения порядка

; F3STR - преобразование 3-байтного двоичного числа в дополнительном коде
; с плавающей запятой формата (8,16)=(ПОР,МАН) в строку формата 
; <длина>"_/-0.ХХХХ*10^ХХ/(-ХХ)"
; F3STR:
; Вход: (stack+2) - адрес двоичного числа
; Выход: результат размещается в области памяти "буфер" (f3str_buffer).

; FADD3 
; FSUB3
; FINV3
; FMUL3
; FDIV3



; FADD3- сложение 2 3-байтных двоичных чисел с плавающей запятой в
; дополнительном коде формата (8,16)=(ПОР,МАН), где байт порядка содержит
; бит знака мантиссы и целочисленный порядок со смещением +40H, а 2 байта
; мантиссы - СТБ и МЛБ - двоичное дробное нормализованное число в допкоде.
;
; FADD3:
; Ввод:  (stack+4) - адрес слагаемого 1
;        (stack+2) - адрес слагаемого 2
; Вывод: (BC) - адрес суммы (сумма на месте слагаемого 1), CY=1 - признак
; переполнения или антипереполнения порядка
; 
; FADD3_:
; Ввод: (BC) - адрес слагаемого 1, (HL) - адрес слагаемого 2
; Вывод: (BC) - адрес суммы (сумма на месте слагаемого 1), CY=1 - признак
; переполнения или антипереполнения порядка
;
; Используются все регистры, сохраняются (BC), (HL).
; Глубина стека - 10
; Используются подпрограммы: KOM3 PM3 OBM3 DMAN2 PMAN2 NMAN2
;
; Оценка:
; длина - 161 байт (+127 байт подпрограмм)
; время - не более 2563 тактов (с учетом подпрограмм)

FADD3:
        pop         d
        pop         h
        pop         b
        push        d
FADD3_:
;Проверка слагаемого 2 (СЛ2) на ноль
        call        KOM3        ;Z=1, если СЛ2=0
        rz                  ;если СЛ2=0, (CY=0)
;Проверка СЛ1 на ноль
        push        b           ;сохранение адреса СЛ1
        mov         d,b
        mov         e,c         ;(D,E) - адрес СЛ1
        xchg
        call        KOM3        ;Z=1, если СЛ1=0
        xchg
        jnz         fadd3_per1  ;если СЛ1 не 0
;Перемещение СЛ2 на место СЛ1 (СЛ1=0, СЛ2 не 0)
        call        PM3    ;СЛ2 на месте СЛ1
        pop         b           ;восстановление адреса СЛ1
        ret                 ;если СЛ1=0, (CY=0)
;Оба слагаемые не ноль. получение Модифицированных кодов
;знаков слагаемых в (В,С):00 = "+", 11="-"
fadd3_per1:
        ldax        d           ;(А) - пор1
        ani         $80         ;выделение знака
        rlc
        ral
        mov         b,a         ;(В) - код знака СЛ1
        mov         a,m
        ani         $80
        rlc
        ral
        mov         c,a         ;(С) - код знака СЛ2
;Определение разности порядков
        push        h           ;сохранение адреса СЛ2
        push        b           ;сохранение кодов знаков
        mov         a,m         ;(А) - пор2
        ani         $7F         ;исключение знака
        mov         b,a         ;(В) - пор2
        ldax        d           ;(А) - пор1
        ani         $7F         ;исключение знака
        sub         b           ;(А)=пор1-пор2
        jz          fadd3_per2  ;если пор1=пор2
        jnc         fadd3_per3  ;если пор1>пор2
        cma                     ;дополнение при пор2>пор1
        inr         a           ;(A)=|пор1-пор2|
        call        OBM3        ;обмен слагаемыми: СЛ2 на СЛ1
;Проверка пеличины разности порядков: <16?
fadd3_per3:
        cpi         $10
        jm          fadd3_per4  ;если разность <16
        xra         a           ;CY=0
        pop         b           ;баланс стека
        pop         h           ;восстановление адреса СЛ2
        pop         b           ;восстановление адреса СЛ1
        ret                 ;если разность порядков >16
;Загрузка СЛ2 в регистры, денормализация мантиссы СЛ2
fadd3_per4:
        push        d           ;сохранение адреса СЛ1
        call        DMAN2       ;(B,C,D) - мантисса
        pop         h           ;(H,L) - адрес СЛ1
        jmp         fadd3_per5
fadd3_per2:
        push        d           ;сохранение адреса СЛ1
        inx         h
        mov         b,m         ;(B) - СТБ МАН2
        inx         h
        mov         c,m         ;(C) - МЛБ МАН2
        mvi         d,$00
        pop         h           ;(H,L) - адрес СЛ1
;Сложение мантисс: (M)+(B,C)=(B,C)
fadd3_per5:
        inx         h
        inx         h           ;адрес МЛБ МАН1
        mov         a,m
        add         c
        mov         c,a
        dcx         h
        mov         a,m
        adc         b
        mov         b,a         ;(B,C) - сумма мантисс
;Анализ суммы на переполнение по модифицированным кодам
        dcx         h           ;(H,L) - адрес пор1
        xthl                    ;(H,L) - коды знаков СЛ1, СЛ2
        mov         a,l
        adc         h           ;сложение знаков и переноса
        ani         $03         ;выделение кода знака суммы
        pop         h           ;(H,L) - адрес пор1
;Занесение знака суммы в байт порядка результата
        push        psw         ;сохранение знаков
        rar
        rar                     ;(CY) - знак суммы
        mov         a,m         ;(А) - пор1 со знаком СЛ1
        ral
        rrc                     ;(А) - пор1 со знаком суммы
        mov         m,a
        pop         psw         ;восстановление знаков
        jpo         fadd3_per8  ;если переполнение: 01 или 10
;Анализ особого случая переполнения для кода знаков 11
        cpi         $03
        jnz         fadd3_per6  ;если не код 3
        push        psw         ;сохранить признаки
        mov         a,b
        ora         c
        jz          fadd3_per7  ;если мантисса=0
        pop         psw         ;восстановить признаки
;Нормализация мантиссы влево
fadd3_per6:
        call        NMAN2       ;(B,C) - нормализованная мантисса
        jnc         fadd3_per9  ;нет антипереполнения знака
        jmp         fadd3_per10 ;антипереполнение знака
;Переполнение: нормализация мантиссы вправо
fadd3_per7:
        pop         psw         ;восстановить признаки
fadd3_per8:
        rar                     ;CY - бит переполнения
        call        PMAN2       ;(B,C) - нормализованная мантисса
        jnc         fadd3_per9
        jmp         fadd3_per10
;округление результата, нормализация мантиссы
fadd3_per9:
        xra         a
        add         d
        jp          fadd3_per10 ;если коррекция=0
        mov         a,c
        adi         $01
        mov         c,a
        mov         a,b
        aci         $00
        mov         b,a
        cc          PMAN2       ;(B,C)-нормализованная мантисса
;запись результата в память
fadd3_per10:
        inx         h
        mov         m,b
        inx         h
        mov         m,c
        pop         h
        pop         b
        ret             ;CY=1, если ошибка порядка


; FSUB3- вычитание 2 3-байтных двоичных чисел с плавающей запятой в
; дополнительном коде формата (8,16)=(ПОР,МАН), где байт порядка содержит
; бит знака мантиссы и целочисленный порядок со смещением +40H, а 2 байта
; мантиссы - СТБ и МЛБ - двоичное дробное нормализованное число в допкоде.
;
; FSUB3:
; Ввод:  (stack+4) - адрес числа
;        (stack+2) - адрес вычитаемого
; Вывод: (BC) - адрес разности (разность на месте числа), CY=1 - признак
; переполнения или антипереполнения порядка
;
; FSUB3_:
; Ввод: (BC) - адрес числа, (HL) - адрес вычитаемого
; Вывод: (BC) - адрес разности (разность на месте числа), CY=1 - признак
; переполнения или антипереполнения порядка
;
; Используются все регистры, сохраняются (BC), (HL).
; Глубина стека - 12
; Используются подпрограммы: KOM3 PM3 OBM3 DMAN2 PMAN2 NMAN2 FADD3
;
; Оценка:
; длина - 161 байт (+127 байт подпрограмм)
; время - не более 2563 тактов (с учетом подпрограмм)

FSUB3:
        pop         d
        pop         h
        pop         b
        push        d
FSUB3_:
        call        FINV3
;Сложение числа с дополненным вычитаемым
        jmp         FADD3


; FINV3 - инверсия числа с плавающей запятой формата (8,16).
; Входной параметр: (H,L) - адрес исходного числа.
; Выходной параметр: (H,L) - адрес результата.
; Используются регистры А,DE. Значение (H,L) сохраняется.
; Используются функции: DOPDE
; Оценка: длина - 16 (+8) байт, время - 90 (+43) тактов

FINV3:
;Инверсия знака вычитаемого
        mvi         a,$80
        xra         m
        mov         m,a
;Дополнение мантиссы вычитаемого
        inx         h
        mov         d,m
        inx         h
        mov         e,m
        call        DOPDE
        mov         m,e
        dcx         h
        mov         m,d
        dcx         h
        ret


; FMUL3 - умножение 2 3-байтных двоичных чисел с плавающей запятой в
; дополнительном коде формата (8,16)=(ПОР,МАН), где байт порядка содержит
; бит знака мантиссы и целочисленный порядок со смещением +40H, а 2 байта
; мантиссы - СТБ и МЛБ - двоичное дробное нормализованное число в допкоде.
;
; FMUL3:
; Ввод:  (stack+4) - адрес множимого
;        (stack+2) - адрес множителя
; Вывод: (BC) - адрес произведения (произведение на месте множимого),
; CY=1 - признак переполнения или антипереполнения порядка
;
; FMUL3_:
; Ввод: (BC) - адрес множимого, (HL) - адрес множителя
; Вывод: (BC) - адрес произведения (произведение на месте множимого),
; CY=1 - признак переполнения или антипереполнения порядка
;
; Используются все регистры, сохраняются (BC), (HL).
; Глубина стека - 14
; Используются подпрограммы: KOM3 OBN3 NMAN2 UDF17
;
; Оценка:
; длина - 61 байт (+167 байт подпрограмм)
; время - не более 2054 тактов (с учетом подпрограмм)

FMUL3:
        pop         d
        pop         h
        pop         b
        push        d
FMUL3_:
;Проверка множимого ММ на 0
        mov         d,b
        mov         e,c         ;(DE) - адрес ММ
        xchg    
        call        KOM3        ;Z=1, если ММ=0
        xchg
        rz                      ;Если ММ=0, (CY=0)
;Проверка множителя МН на 0
        call        KOM3        ;Z=1, если МН=0
        jnz         fmul3_per1  ;если МН не 0
        xchg    
        call        OBN3        ;обнуление произведения
        xchg
        ret                     ;Если МН=0, (CY=0)
;Оба сомножителя не 0. Определение порядка и знака произведения
fmul3_per1:
        push        b           ;сохр адреса ММ
        push        h           ;сохр адреса МН
        ldax        d           ;(А) - байт ПОР ММ
        xra         m           ;(А) - байт ПОР МН
        ani         $80         ;(А[7]) - знак произведения
        mov         c,a         ;сохранение знака в (С)
        ldax        d
        ani         $7F         ;исключение знака ММ
        mov         b,a         ;(В) - ПОР ММ
        mov         a,m
        ani         $7F         ;исключение знака МН
        sui         $40         ;исключение смещения для МН
        add         b           ;(А) = (ПОР ММ + ПОР МН)
        stc                     ;CY=1
        jm          fmul3_per2  ;если переполнение порядка
        ora         c           ;вставка знака в байт ПОР
        push        psw         ;сохранение байта порядка
;Вычисление мантиссы и ее нормализация
        call        UDF17       ;(ВС) - мантисса ПР
        pop         psw         ;восстановление байта порядка
        stax        d           ;запоминание порядка
        xchg                    ;(HL) - адрес порядка ПР
        mvi         d,$00
        call        NMAN2       ;(BC) - мантисса
;Запись результата в память
        inx         h
        mov         m,b
        inx         h
        mov         m,c
fmul3_per2:
        pop         h
        pop         b
        ret             ;CY=1, если ошибка порядка


; FDIV3 - деление 2 3-байтных двоичных чисел с плавающей запятой в
; дополнительном коде формата (8,16)=(ПОР,МАН), где байт порядка содержит
; бит знака мантиссы и целочисленный порядок со смещением +40H, а 2 байта
; мантиссы - СТБ и МЛБ - двоичное дробное нормализованное число в допкоде.
; FDIV3:
; Ввод:  (stack+4) - адрес делимого
;        (stack+2) - адрес делителя
; Вывод: (BC) - адрес частного (частное на месте делимого), CY=1 - признак
; переполнения или антипереполнения порядка
;
; FDIV3_:
; Ввод: (BC) - адрес делимого, (HL) - адрес делителя
; Вывод: (BC) - адрес частного (частное на месте делимого), CY=1 - признак
; переполнения или антипереполнения порядка
;
; Используются все регистры, сохраняются (BC), (HL).
; Глубина стека - 8
; Используются подпрограммы: KOM3 DDF17 PMA2
;
; Оценка:
; длина - 59 байт (+119 байт подпрограмм)
; время - не более 2780 тактов (с учетом подпрограмм)

FDIV3:
        pop         d
        pop         h
        pop         b
        push        d
FDIV3_:
;Проверка делителя ДЛ на 0
        call        KOM3
        stc
        rz
;Проверка делимого ДМ на 0
        xchg
        call        KOM3
        xchg
        rz
;ДЛ и ДМ не 0. Определение порядка и знака частного
        mov         d,b
        mov         e,c         ;(DE) - адрес ДМ
        push        b           ;сохранение адреса ДМ
        push        h           ;сохранение адреса ДЛ
        ldax        d           ;(А) - байт порядка ДМ
        xra         m           ;(М) - байт порядка ДЛ
        ani         $80         ;(A[7]) - знак частного
        mov         c,a         ;сохранение знака в (С)
        mov         a,m
        ani         $7F         ;исключение знака ДЛ
        mov         b,a         ;(В) - порядок ДЛ
        ldax        d
        ani         $7F         ;исключение знака ДМ
        adi         $40         ;учет смещения порядка
        sub         b           ;(А) - порядок частного
        stc                     ;CY=1
        jm          fdiv3_per1  ;если переполнение порядка
        ora         c           ;вставка знака в байт ПОР
        mov         b,a
        push        b           ;сохранение байта ПОР
;Вычисление мантиссы частного
        call        DDF17       ;(BC) - частное
        pop         h           ;восстановление байта ПОР
        mov         a,h
        stax        d           ;запоминание байта ПОР
        xchg                    ;(HL) - адрес ДМ
        jnc         fdiv3_per2  ;если нет переполнения
;Коррекция порядка частного
        call        PMA2        ;CY=1, если переполнение порядка
        jc          fdiv3_per1  ;если переполнение
;Запись мантиссы частного в память
fdiv3_per2:
        inx         h
        mov         m,b
        inx         h
        mov         m,c
fdiv3_per1:
        pop         h           ;восстановление адреса ДЛ
        pop         b           ;восстановление адреса ДМ
        ret                     ;CY=1, если ошибка


; F3STR - преобразование 3-байтного двоичного числа в дополнительном коде
; с плавающей запятой формата (8,16)=(ПОР,МАН) в строку формата 
; <длина>"_/-0.ХХХХ*10^ХХ/(-ХХ)"
;
; F3STR:
; Вход: (stack+2) - адрес двоичного числа
; Выход: результат размещается в области памяти "буфер" (f3str_buffer).
;
; F3STR_:
; Вход: (H,L) - адрес двоичного числа
; Выход: результат размещается в области памяти "буфер" (f3str_buffer).
;
; Используются все регистры
; Используется 5 байт памяти, начиная с адреса f3bcd_buffer
; Глубина стека - 11
; Используются подпрограммы: KOM3, DOPBC, PF16, L4SVN, UF102, DF102, PMAN6, UFC10
; F3BCD
; Оценка: длина -  (+376) байта, время не более (2105+1679*К) тактов, где
; К - двоичный порядок

F3STR:
        pop         h
F3STR_:
        call        F3BCD
        lxi         h,f3str_buffer  ;output buffer
        mvi         m,$0C           ;стандартная длина буфера - 12 байт
        inx         h
        lxi         d,f3bcd_buffer  ;input buffer
        ldax        d               ;читаем байт знака
        inx         d
        ora         a
        jp          f3str_1         ;Если S=1,байт дл буфера+1 и допис"-"в вых буфер
        dcx         h
        inr         m
        inx         h
        mvi         m,$2D
        inx         h
;Пишем "0," в выходной буфер
f3str_1:
        mvi         m,$30           ;'0'
        inx         h
        mvi         m,$2E           ;'.'
        inx         h
;Пишем дробную часть в выходной буфер
        ldax        d               ;берем Р1 и Р2
        inx         d
        mov         b,a             ;сохраняем в (В)
        ani         $F0             ;выделяем Р1
        rrc
        rrc
        rrc
        rrc
        adi         $30             ;преобразуем в код символа
        mov         m,a             ;сохраняем в выходном буфере
        inx         h
        mov         a,b
        ani         $0F             ;выделяем Р2
        adi         $30             ;преобразуем в код символа
        mov         m,a             ;сохраняем в выходном буфере
        inx         h
        ldax        d               ;берем Р3 и Р4
        inx         d
        mov         b,a             ;сохраняем в (В)
        ani         $F0             ;выделяем Р3
        rrc
        rrc
        rrc
        rrc
        adi         $30             ;преобразуем в код символа
        mov         m,a             ;сохраняем в выходном буфере
        inx         h
        mov         a,b
        ani         $0F             ;выделяем Р4
        adi         $30             ;преобразуем в код символа
        mov         m,a             ;сохраняем в выходном буфере
        inx         h
;Пишем порядок в буфер
        mvi         m,$2A           ;'*'
        inx         h
        mvi         m,$31
        inx         h
        mvi         m,$30
        inx         h
        mvi         m,$5E           ;'^'
        inx         h
;если степень отрицательная, добавляем скобочки и минус
        ldax        d
        inx         d
        ora         a
        jp          f3str_2
        mvi         m,$28           ;'('
        inx         h
        mvi         m,$2D           ;'-'
        inx         h
        call        f3str_2
        inx         h
        mvi         m,$29           ;')'
        lda         f3str_buffer
        adi         $03
        sta         f3str_buffer
        ret
f3str_2:
        ldax        d
        mov         b,a
        ani         $F0             ;выделяем старший разряд показателя
;Если старший разряд равен 0, пропускаем его и уменьшаем длину строки на 1
        jz          f3str_3
        rrc
        rrc
        rrc
        rrc
        adi         $30             ;преобразуем в код символа
        mov         m,a             ;сохраняем в выходном буфере
        inx         h
f3str_4:
        mov         a,b
        ani         $0F             ;выделяем Р2
        adi         $30             ;преобразуем в код символа
        mov         m,a             ;сохраняем в выходном буфере
        ret
;уменьшаем длину строки на 1
f3str_3:
        lda         f3str_buffer
        dcr         a
        sta         f3str_buffer
        jmp         f3str_4


;Подпрограмма умножения двоичного беззнакового числа с фиксированной перед
;старшим разрядом запятой формата 16 на основе десятичной системы: 10
;Вход: (B,C) - число с фикс. запятой
;Выход: (A) - целая часть произведения (двоично-десятичная цифра),
;(B,C) - дробная часть произведения
;Используются все регистры.
;Оценка: длина - 30 байт, время - 172 такта

UFC10:
;Подготовка регистров
        mov         h,b
        mov         l,c     ;(H,L) - число с ФЗ
        mov         d,b
        mov         e,c     ;(D,E) - число с ФЗ
        xra         a       ;(А)=0
        mov         b,a
        mov         c,a     ;(B,C)=0
;Сдвиг числа с ФЗ влево на 1 разряд в (B,H,L)
        dad         h
        adc         b
        mov         b,a     ;числос ФЗ*2
;Сдвиг числа с ФЗ влево на 3 разряда в (C,D,E)
        xchg            ;(H,L) - число с ФЗ
        dad         h       ;первый сдвиг
        mov         a,c
        ral
        mov         c,a
        dad         h       ;второй сдвиг
        mov         a,c
        ral
        mov         c,a
        dad         h       ;третий сдвиг
        mov         a,c
        ral
        mov         c,a
        xchg            ;(C,D,E) - число с ФЗ*8
;Сложение сдвинутых чисел: умножение на 10
        dad         d
        mov         a,b
        adc         c       ;(A,H,L) - число с ФЗ*10
        mov         b,h
        mov         c,l     ;(В,С) - дробная часть
        ret             ;(A) - целая часть


;Подпрограмма преобразования двоичного беззнакового числа с фиксированной перед
;старшим разрядом запятой формата 16 в двоично-десятичное число с фиксированной
;запятой (,Р1Р2Р3Р4Р5) формата 5*4.
;Вход: (B,C) - двоичное число
;Выход: (A,H,L) - эквивалентное двоично-десятичное число
;Используются все регистры
;Глубина стека - 10
;Используются подпрограммы: UFC10
;Оценка: длина - 38 байт (+30 байт подпрограмм), время - не более 1099 тактов

PF16:
;Последовательное умножение исходного числа на 10
    call    UFC10
    push    psw     ;сохранение цифры Р1
    call    UFC10
    push    psw     ;сохранение цифры Р2
    call    UFC10
    push    psw     ;сохранение цифры Р3
    call    UFC10
    push    psw     ;сохранение цифры Р4
    call    UFC10
    mov     l,a     ;(L) - цифра Р5
;Упаковка цифор результата в регистры
    pop     psw     ;восстановление цифры Р4
    rlc
    rlc
    rlc
    rlc
    ora     l
    mov     l,a     ;(L) - цифры Р4,Р5
    pop     psw     ;восстановление цифры Р3
    mov     h,a     ;(Н) - цифра Р3
    pop     psw     ;восстановление цифры Р2
    rlc
    rlc
    rlc
    rlc
    ora     h
    mov     h,a     ;(H,L) - цифры Р2,Р3,Р4,Р5
    pop     psw     ;восстановление цифры Р1
    ret             ;(А) - цифра Р1


;Подпрограмма левого сдвига часла в регистрах (B,H,L) с заполнение свободных
;разрядов нулями
;Вход: (B,H,L) - исходное число
;Выход: (B,H,L) - число после сдвигов
;Используется регистр А
;Оценка: длина - 11 байт, время - 76 тактов

L4SVN:
    mov     a,b
L4SVN+1:
    dad     h       ;первый сдвиг
    ral
    dad     h       ;второй сдвиг
    ral
    dad     h       ;третий сдвиг
    ral
    dad     h       ;четвертый сдвиг
    ral
    mov     b,a
    ret


;Подпрограмма устранения переполнения 6-значной беззнаковой двоично-десятичной
;мантиссы с плавающей запятой.
;Вход: (B,H,L) - десятичная мантисса, (D) - десятичный порядок со знаком
;(модуль порядка < 79), CY=1 - признак переполнения мантиссы
;Выход: (B,H,L) - нормализованная десятичная мантисса, (D) - десятичный порядок
;со знаком
;Используются все регистры кроме В,С
;Оценка: длина - 49 байт, время - не более 366 тактов

PMAN6:
    mvi     c,$04   ;(С) - счетчик циклов сдвига
;Сдвиг мантиссы вправо на 4 двоичных разряда
pman6_cycle:
    mov     a,b
    rar
    mov     b,a
    mov     a,h
    rar
    mov     h,a
    mov     a,l
    rar
    mov     l,a
    xra     a
;Проверка конца цикла
    dcr     c
    jnz     pman6_cycle
;Проверка знака десятичного порядка
    xra     a
    add     d
    jm      pman6_per   ;если знак "-"
;Коррекция положительного десятичного порядка
    adi     $01
    daa
    mov     d,a
    ret
;Коррекция отрицательного десятичного порядка
pman6_per:
    ani     $7F         ;удаление знака
    mov     d,a
    mvi     a,$99       ;десятичное дополнение порядка
    sub     d
    adi     $02         ;коррекция дополнения порядка
    daa
    mov     d,a
    mvi     a,$99       ;дополнение дополнения порядка
    sub     d
    adi     $01
    daa
    mov     d,a
    rz                  ;если десятичный порядок = 0
    mvi     c,$80       ;(С) = знак "-"
    ora     c           ;вставка знака
    mov     d,a
    ret                 ;десятичный порядок < 0


;Подпрограмма умножения 6-значного беззнакового двоично-десятичного числа с
;фикс. перед старшим разрядом запятой на двоичную степень формата
;(0,Р1Р2Р3Р4Р5Р6)*(2**К)=(0,R1R2R3R4R5R6)*(10**M), где P(I),R(I) - двоично-
;-десятичная цифра, К - двоичный порядок, М - двоично-десятичный порядок
;Вход: (B,H,L) - исходное десятичное число, (Е) - двоичный порядок К, (D)=0
;Выход: (B,H,L) - результирующее десятичное число, (D) - десятичный порядок
;Используются все регистры, глубина стека - 2
;Используется подпрограмма PMAN6
;Оценка: длина - 20 (+49) байт, время - не более (10+172*К) тактов

UF102:
;умножение исходного числа на 2 методом сложения
uf102_cycle:
    mov     a,l     ;сложение МЛЦ
    add     l
    daa
    mov     l,a
    mov     a,h     ;сложение СРЦ
    adc     h
    daa
    mov     h,a
    mov     a,b     ;сложение СТЦ
    adc     b
    daa
    mov     b,a
;Нормализация чила, коррекция десятичного порядка
    cc      PMAN6   ;если переполнение
;Проверка конца цикла
    dcr     e
    jnz     uf102_cycle
    ret


;Подпрограмма деления 6-значного беззнакового двоично-десятичного числа с
;фикс. перед старшим разрядом запятой на двоичную степень формата
;(0,Р1Р2Р3Р4Р5Р6):(2**К)=(0,R1R2R3R4R5R6)*(10**(-M)), где P(I),R(I) - двоично-
;-десятичная цифра, К - двоичный порядок, М - двоично-десятичный порядок
;Вход: (B,H,L) - исходное десятичное число, (Е) - двоичный порядок К, (D)=0
;Выход: (B,H,L) - результирующее десятичное число, (D) - десятичный порядок
;Используются все регистры, глубина стека - 6
;Используется подпрограмма L4SVN
;Оценка: длина - 79 (+11) байт, время - не более (39+1679*К) тактов

DF102:
;Деление десятичного делимого на 2
df102_cycle1:
    push    d           ;сохранить порядки
    mvi     d,$06       ;(D) - счетчик цифр
    xra     a           ;(А) - остаток Q(I-1)*10=0
df102_cycle2:
    push    d           ;сохранение счетчика
    mov     e,a         ;сохранение остатка
;Выделение цифры Р(I) делимого, сложение ее с Q(I)*10
    mov     a,b
    ani     $F0         ;маска на СТЦ
    rrc                 ;сдвиг СТЦ на место МЛЦ
    rrc
    rrc
    rrc
    add     e
    mov     e,a         ;(Е)=Q(I-1)*10+P(I)
    call    L4SVN       ;сдвиг делимого влево (B,H,L)
;Определение десятичной цифры частного R(I)
    xra     a           ;CY=0
    mov     a,e         ;(A)=Q(I-1)*10+P(I)
    rar                 ;(Е)=(Q(I-1)*10+P(I)):2 = R(I)
    push    psw         ;сохранение остатка (CY)
    ora     l
    mov     l,a         ;запись цифры частного
    pop     psw         ;восстановление остатка
;проверка конца цикла 2
    pop     d           ;восстановление счетчика
    dcr     d
    jz      df102_per1  ;если конец цикла 2
;Умножение на 10 остатка (CY) деления P(I):2
    mvi a,$0A           ;остаток = 1*10
    jc df102_cycle2
    xra a               ;остаток = 0*10
    jmp df102_cycle2
;Нормализация десятичного частного
df102_per1:
    pop d               ;восстановление порядков
    push psw            ;сохранение остатка Q(6)
    mov a,b
    ani $F0             ;маска на СТЦ
    jnz df102_per2      ;если СТЦ не 0
    call L4SVN          ;(B,H,L) - нормализованное число
    pop psw             ;восстановление остатка Q(6)
    jnc df102_per3      ;если остаток Q(6)=0
    mvi a,$05           ;(А) - десятичный остаток
    ora l
    mov l,a             ;запись остатка в частное
df102_per3:             ;коррекция порядка
    mov     a,d
    adi     $01
    daa
    mov     d,a
    jmp     df102_per2+1
;Проверка конца цикла 1
    df102_per2:
    pop     psw         ;баланс стека
df102_per2+1:
    dcr     e
    jnz     df102_cycle1
;Вставка знака десятичного порядка
xra a
add d                   ;(А) - порядок
rz                      ;десятичный порядок=0
mvi a,$80               ;знак "-"
ora d
mov d,a
ret                     ;десятичный порядок < 0


;Подпрограмма преобразования 3-байтного двоичного числа в дополнительном коде
;с плавающей запятой формата (8,16)=(ПОР,МАН) в 3-байтное двоично-десятичное
;число с плавающей запятой в прямом коде формата ((+-0,Р1Р2Р3Р4*10**(+-N)),
;где байт двоичного порядка содержит бит знака мантиссы и целочисленный двоичный
;порядок со смещением +40Н, а 2 байта мантиссы - дробное двоичное нормализованное
;число в дополнительном коде; двоично-десятичное число содержит байт знака числа,
;2 байта двоично-десятичной мантиссы в BCD-коде, байт знака порядка и байт
;двузначного порядка N (BCD-код)
;Вход: (H,L) - адрес двоичного числа. результат размещается в области памяти
;"буфер".
;Используются все регистры, сохраняются (H,L)
;Используется 5 байт памяти, начиная с адреса f3bcd_buffer
;Глубина стека - 10
;Используются подпрограммы: KOM3, DOPBC, PF16, L4SVN, UF102, DF102, PMAN6, UFC10
;Оценка: длина - 122 (+254) байта, время не более (2105+1679*К) тактов, где
;К - двоичный порядок

F3BCD:
;Проверка исходного числа на 0
    call    KOM3
    jnz     f3bcd_per1
;Обнуление результата в буфере
    push    h
    lxi     h,f3bcd_buffer
    mvi     m,$00
    inx     h
    call    OBN4
    pop     h
    ret
;Выделение знака мантиссы, перевод ее в прямой код
f3bcd_per1:
    push    h
    mov     a,m
    mov     e,a
    ani     $80
    sta     f3bcd_buffer
    inx     h
    mov     b,m
    inx     h
    mov     c,m
    jp      f3bcd_per2
    call    DOPBC
;Преобразование смещенного порядка, выделение его знака
f3bcd_per2:
    mov     a,e
    ani     $7F
    sui     $40
    jm      f3bcd_per3
    mov     e,a
    mvi     d,$00
    jmp     f3bcd_per4
;дополнение отрицательного порядка
f3bcd_per3:
    cma
    inr     a
    mov     e,a
    mvi     d,$80
;Преобразование двоичной мантиссы в десятичную
;Сдвиг мантиссы на 1 десятичный разряд влево
f3bcd_per4:
    push    d
    call    PF16
    pop     d
    call    L4SVN+1
;Проверка величины (не 0?) и знака двоичного порядка
    xra     a
    add     e
    jz      f3bcd_per5
    mov     a,d
    ral
    jc      f3bcd_per6
;умножение десятичной мантиссы на двоичный порядок
    call    UF102
    jmp     f3bcd_per5
;деление десятичной мантиссы на двоичный порядок
f3bcd_per6:
    mvi     d,$00
    call    DF102
;Округление 6-значной мантиссы до 4-значной
f3bcd_per5:
    mov     a,l
    cpi     $50
    jm      f3bcd_per7
    mov     a,h
    adi     $01
    daa
    mov     h,a
    mov     a,b
    aci     $00
    daa
    mov     b,a
    cc      PMAN6
;Запись результата в память
f3bcd_per7:
    mov     c,h
    lxi     h,f3bcd_buffer
    inx     h
    mov     m,b
    inx     h
    mov     m,c
    inx     h
    mov     a,d
    ani     $80
    mov     m,a
    inx     h
    mov     a,d
    ani     $7F
    mov     m,a
    pop     h
    ret


; Подпрограмма контроля массива из 3 байт в памяти на ноль.
; Входной параметр: (H,L) - начальный адрес массива.
; Выходной параметр: Z=1 - признак равенства массива нулю.
; Используется регистр А, значение (H,L) сохраняется.
; Оценка: длина - 8 байт, время - 51 такт
KOM3:
    mov     a,m
    inx     h
    ora     m
    inx     h
    ora     m
    dcx     h
    dcx     h
    ret

; Подпрограмма контроля массива из 4 байт в памяти на ноль.
; Входной параметр: (H,L) - начальный адрес массива.
; Выходной параметр: Z=1 - признак равенства массива нулю.
; Используется регистр А, значение (H,L) сохраняется.
; Оценка: длина - 11 байт, время - 68 тактов
KOM4:
    mov     a,m
    inx     h
    ora     m
    inx     h
    ora     m
    inx     h
    ora     m
    dcx     h
    dcx     h
    dcx     h
    ret

; Подпрограмма перемещения 3 байт массива из одной области памяти в другую.
; Входные параметры: (D,E) - начальный адрес массива-приемника,
; (H,L) - начальный адрес массива-источника.
; Используется регистр А, сохраняются DE, HL
; Оценка: длина - 15 байт, время - 92 такта
PM3:
    mov     a,m
    stax    d
    inx     h
    inx     d
    mov     a,m
    stax    d
    inx     h
    inx     d
    mov     a,m
    stax    d
    dcx     h
    dcx     h
    dcx     d
    dcx     d
    ret

; Подпрограмма перемещения 4 байт массива из одной области памяти в другую.
; Входные параметры: (D,E) - начальный адрес массива-приемника,
; (H,L) - начальный адрес массива-источника.
; Используется регистр А,C; сохраняются DE, HL
; Оценка: длина - 15 байт, время - 215 тактов
PM4:
    mvi     c,$04
    push    h
    push    d
pm4_cycle:
    mov     a,m
    stax    d
    inx     h
    inx     d
    dcr     c
    jnz     pm4_cycle
    pop     d
    pop     h
    ret

; Подпрограмма обмена содержимым 2 3-байтных массивов, размещенных в
; непересекающихся областях памяти.
; Входные параметры: DE - адрес массива 1; HL - адрес массива 2.
; Используются и сохраняются все регистры, глубина стека -2
; Оценка: длина - 28 байт, время - 180 тактов
OBM3:
    push    b
    mov     b,a  ;сохранение (А)
;Обмен первыми байтами
    mov     c,m
    ldax    d
    mov     m,a
    mov     a,c
    stax    d
    inx     d
    inx     h
;Обмен вторыми байтами
    mov     c,m
    ldax    d
    mov     m,a
    mov     a,c
    stax    d
    inx     d
    inx     h
;Обмен третьими байтами
    mov     c,m
    ldax    d
    mov     m,a
    mov     a,c
    stax    d
;Восстановление адресов и регистров
    dcx     h
    dcx     h
    dcx     d
    dcx     d
    mov     a,b
    pop     b
    ret

; Подпрограмма денормализации 2-байтной мантиссы числа с плавающей запятой.
; Вход: (А) - разность порядков N, (HL) - адрес числа с плавающей запятой.
; Выход: (ВС) - денормализованная мантисса, (D) - выдвинутые разряды мантиссы.
; Используются все регистры кроме L
; Оценка: длина - 25 байт, время - (58+66*N) тактов
DMAN2:
;загрузка слагаемого в регистры H,B,C
    mov     e,a
    mov     a,m
    inx     h
    mov     b,m
    inx     h
    mov     c,m
    mov     h,a
    mvi     d,$00
;сдвиг мантиссы вправо на N разрядов в (B,C,D)
dman_cycle:
    mov     a,h
    ral
    mov     a,b
    rar
    mov     b,a
    mov     a,c
    rar
    mov     c,a
    mov     a,d
    rar
    mov     d,a
    dcr     e
    jnz     dman_cycle
    ret

; Подпрограмма устранения переполнения 2-байтной мантиссы числа с плавающей
; запятой.
; Вход: (ВС) - мантисса, (D) - дополнительные младшие разряды мантиссы,
; CY - бит переполнения,  (HL) - адрес порядка.
; Выход: (BC) - нормализованная мантисса, (HL) - адрес порядка, CY - признак
; переполнения порядка. Используются регистры A,B,C,D
; Оценка: длина - 18 байт, время - не более 93 тактов
PMAN2:
    mov     a,b
    rar
    mov     b,a
    mov     a,c
    rar
    mov     c,a
    mov     a,d
    rar
    mov     d,a
;контроль порядка на переполнение и его коррекция
PMA2: ;(ПМА2)
    mov     a,m
    cma
    ani     $7F
    stc
    rz
    inr     m
    xra     a
    ret

; Подпрограмма нормализации 2-байткой мантиссы числа с плавающей запятой.
; Вход: (BC) - нормализуемая мантисса, (D) - младшие разряды денормализованной
; мантиссы, (HL) - адрес порядка.
; Выход: (BC) - нормализованная мантисса, (D) - дополнительные младшие разряды
; мантиссы, (HL) - адрес порядка, CY=1 - признак антипереполнения порядка.
; Используются все регистры кроме (E), сохраняется (HL)
; Оценка: длина - 33 байта, время - не более (57+122*(N-1)) тактов, N<16
NMAN2:
;проверка мантиссы на 0
    mov     a,b         ;(А) - СТБ МАН
    ora     c
    jnz     nman2_cycle ;если не 0
    mov     m,a         ;обнуление порядка
    ret                 ;если МАН=0, (CY=0)
;Проверка явно нормализованной мантиссы: знаковый и старший разряд различны?
nman2_cycle:
    mov     a,b
    xra     m
;xra a
    rm                  ;если явная нормализация, (CY=0)
;Проверка неявно нормализованной мантиссы
    mov     a,b
    ani     $7F         ;исключение старшего разряда
    ora     c
    rz                  ;если неявная нормализация, (CY=0)
;Нормализация мантиссы: сдвиг влево в (B,C,D)
    mov     a,d
    ral 
    mov     d,a
    mov     a,c
    ral
    mov     c,a
    mov     a,b
    ral
    mov     b,a
;контроль на антипереполнение порядка, его коррекция
    mov     a,m         ;(А) - порядок
    ani     $7F         ;исключение знака
    stc
    rz                  ;если порядок минимален
    dcr     m
    jmp     nman2_cycle


; Подпрограмма обнуления 3-байтного массива в заданной области памяти
; Вход: (HL) - начальный адрес обнуляемого массива
; Используется регистр А, сохраняется (HL)
; Оценка: длина - 9 байт, время - 55  тактов
OBN3:
    xra     a
    mov     m,a
    inx     h
    mov     m,a
    inx     h
    mov     m,a
    dcx     h
    dcx     h
    ret

; Подпрограмма обнуления 4-байтного массива в заданной области памяти
; Вход: (HL) - начальный адрес обнуляемого массива
; Используется регистр А, сохраняется (HL)
; Оценка: длина - 12 байт, время - 72  такта
OBN4:
    xra     a
    mov     m,a
    inx     h
    mov     m,a
    inx     h
    mov     m,a
    inx     h
    mov     m,a
    dcx     h
    dcx     h
    dcx     h
    ret


; UDF17 - умножение 2 двоичных чисел в дополнительном коде с фиксированной
; после знакового разряда запятой формата (1,16)*(1,16)=(1,16), где
; (1,16)=(ЗНАК,СТБ,МЛБ). 
;
; Ввод: (DE) - адрес множимого, (HL) - адрес множителя
; Вывод: (BC) - 2 старших байта произведения
;
; Используются все регистры, сохраняются (DE), (HL).
; Глубина стека - 8
; Используются подпрограммы: DOPBC DOPDE U32B U24A
;
; Оценка:
; длина - 41 байт (+76 байт подпрограмм)
; время - не более 1481 тактов (с учетом подпрограмм)

UDF17:
    push    d
    push    h
;Проверка знаков сомножителей на совпадение
    ldax    d
    xra     m
    push    psw
;Пересылка множимого из памяти в (BC)
    xchg
    mov     a,m
    ora     a
    inx     h
    mov     b,m
    inx     h
    mov     c,m
    xchg
    cm      DOPBC        ;дополнение ММ, если ММ<0
;Пересылка множителя из памяти в (DE)
    mov     a,m
    ora     a           ;проявление признака знака
    inx     h
    mov     d,m
    inx     h
    mov     e,m         ;(DE) - множитель
    cm      DOPDE        ;дополнение МН, если МН<0
;Беззнаковое умножение чисел 16*16=32
    call    U32B
    mov     a,h
    ral
    jnc     udf17_per1
    inx     b
udf17_per1:
    pop     psw
    cm      DOPBC
    pop     h
    pop     d
    ret


; Подпрограмма U32B - умножение 2 двоичных чисел без знака
; формата 16*8=32 (без проверки сомножителей на 0)
; Ввод: (DE) - множимое, (BC) - множитель
; Вывод: (B,C,H,L) - произведение
; Используются все регистры
; глубина стека - 4
; Используется подпрограмма U24A
; Оценка: длина - 42 байт (+18), время - не более 1127 тактов

U32B:
;Обнуление текущей суммы ЧП
    xra     a
    mov     h,a
    mov     l,a
;Проверка множимого на 0
    ora     d
    ora     e
    jnz     u32b_per1
    mov     b,a
    mov     c,a
    ret
;Проверка множителя на 0
u32b_per1:
    xra     a
    ora     b
    ora     c
    rz
;Умножение множимого на МЛБ множителя
    mov     a,c
    push    b
    call    U24A
;Сохранение произведения 1
    xthl
    push    psw
;Умножение множимого на СТБ множителя
    mov     a,h
    call    U24A
;Сложение сдвинутых на 8 разрядов ПР1 и ПР2
    mov     b,a
    pop     psw
    add     h
    mov     c,a
    jnc     u32b_per2
    inr     b
u32b_per2:
    mov     h,l
    mvi     l,$00
    pop     d
    dad     d
    rnc
    inx     b
    ret


; Подпрограмма U24A - умножение 2 двоичных чисел без знака
; формата 16*8=24 (без проверки сомножителей на 0)
; Ввод: (DE) - множимое, (А) - множитель
; Вывод: (A,H,L) - произведение
; Используются все регистры, сохраняется (DE).
; Оценка: длина - 18 байт, время - не более 454 тактов

U24A:
    lxi     h,$0000
    lxi     b,$0008
;Сдвиг текущей суммы ЧП и множителя влево
u24a_cycle:
    dad     h
    adc     a
    jnc     u24a_per1
;Сложение множимого с текущей суммой ЧП
    dad     d
    adc     b
u24a_per1:
    dcr     c
    jnz     u24a_cycle
    ret


;Подпрограмма деления целых двоичных чисел без знака формата 16:16=(16,16)
;с дробным частным. Метод деления с восстановлением остатка.
;Вход: (HL) - делимое, (BC) - делитель
;Выход: (DE) - частное, (HL) - остаток, CY=0 - признак переполнения частного
;Используются все регистры
;Глубина стека - 2
;Используется подпрограмма: DOPBC
;Оценка: длина 40 (+8) байт, время - не более 1832 тактов

D216:
;Проверка частного на переполнение
    mov     a,l
    sub     c
    mov     a,h
    sbb     b
    rnc     ;если переполнение, CY=0
;Дополнение делителя
    call    DOPBC
D216A:
    mvi     a,$10
;Сдвиг частного (DE) и остатка (HL) влево
d216_cycle:
    xchg
    dad     h           ;сдвиг частного
    xchg
    dad     h           ;сдвиг остатка
    jc      d216_per1
;Сложение остатка с допкодом делителя
    push    h
    dad     b
    jnc     d216_per2  ;если сумма < 0
;Сумма > 0. разряд частного=1
    inx     sp
    inx     sp          ;баланс стека
    inx     d           ;+1 в частное
    jmp     d216_per3
;Переполнение остатка. разряд частного=1
d216_per1:
    dad     b           ;формирование остатка
    inx     d           ;+1 в частное
    jmp     d216_per3
;Сумма < 0. Восстановление остатка
d216_per2:
    pop     h
;Проверка конца цикла
d216_per3:
    dcr     a
    jnz     d216_cycle
    stc
    ret


; Подпрограмма правого одноразрядного сдвига числа в регистровой паре (BC).
; Вдвигается бит CY=0, если вход в программу "POSB", и CY=0 или 1, если вход
; в программу "POSB+1"
; Вход: (BC) - исходное число
; Выход: (BC) - число после сдвига
; Используется регистр А
; Оценка: длина - 8 байт, время - 42 такта

POSB:
    xra     a
    POSB+1:
    mov     a,b
    rar
    mov     b,a
    mov     a,c
    rar
    mov     c,a
    ret

; Подпрограмма правого одноразрядного сдвига числа в регистровой паре (DE).
; Вдвигается бит CY=0, если вход в программу "POSD", и CY=0 или 1, если вход
; в программу "POSD+1"
; Вход: (DE) - исходное число
; Выход: (DE) - число после сдвига
; Используется регистр А
; Оценка: длина - 8 байт, время - 42 такта

POSD:
    xra     a
    POSD+1:
    mov     a,d
    rar
    mov     d,a
    mov     a,e
    rar 
    mov     e,a
    ret

; Подпрограмма правого одноразрядного сдвига числа в регистровой паре (HL).
; Вдвигается бит CY=0, если вход в программу "POSH", и CY=0 или 1, если вход
; в программу "POSH+1"
; Вход: (HL) - исходное число
; Выход: (HL) - число после сдвига
; Используется регистр А
; Оценка: длина - 8 байт, время - 42 такта

POSH:
    xra     a
    POSH+1:
    mov     a,h
    rar
    mov     h,a
    mov     a,l
    rar
    mov     l,a
    ret


; DDF17 - деление 2 двоичных нормализованныхчисел в дополнительном коде
; с фиксированной после знакового разряда запятой формата (1,16)*(1,16)=(1,16),
; где (1,16)=(ЗНАК,СТБ,МЛБ). 
;
; Ввод: (DE) - адрес делимого, (HL) - адрес делителя
; Вывод: (BC) - частное, CY=1 - признак переполнения частного
;
; Используются все регистры, сохраняются (DE), (HL).
; Глубина стека - 8
; Используются подпрограммы: DOPBC DOPHL D216A
;
; Оценка:
; длина - 61 байт (+56 байт подпрограмм)
; время - не более 2243 такта (с учетом подпрограмм)

DDF17:
    push    d
    push    h
;Проверка знаков делимого и делителя на совпадение
    ldax    d
    xra     m           ;(A[7]=1), S=1, если разные знаки
    push    psw         ;сохр признаков
;Пересылка делителя из памяти в регистры (BC)
    mov     a,m
    ora     a           ;проявление знака делителя
    inx     h
    mov     b,m
    inx     h
    mov     c,m
    cp      DOPBC
;Пересылка делимого из памяти в регистры (HL)
    xchg
    mov     a,m
    ora     a
    inx     h
    mov     d,m
    inx     h
    mov     e,m
    xchg
    cm      DOPHL
;Проверка переполнения частного: >1?
    push    h
    dad     b
    jc      ddf17_per1
    pop     h
    jmp     ddf17_per2
ddf17_per1:
    inx     sp
    inx     sp
ddf17_per2:
    push    psw
;Беззнаковое деление двоичных чисел формата 16:16=16
    call    D216A
    mov     b,d
    mov     c,e
;Коррекция частного при переполнении
    pop     psw
    mvi     d,$00
    jnc     ddf17_per3
    call    POSB+1
    inr     d
ddf17_per3:
    pop     psw
    cm      DOPBC
    mov     a,d
    rar
    pop     h
    pop     d
    ret
